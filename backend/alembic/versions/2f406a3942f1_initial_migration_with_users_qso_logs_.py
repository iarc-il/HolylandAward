"""Initial migration with users, qso_logs, and awards tables

Revision ID: 2f406a3942f1
Revises: 9b241c567b38
Create Date: 2025-09-14 00:35:12.238398

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "2f406a3942f1"
down_revision: Union[str, Sequence[str], None] = "9b241c567b38"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "awards",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("callsign", sa.String(), nullable=True),
        sa.Column("award_type", sa.String(), nullable=True),
        sa.Column(
            "issued_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_awards_callsign"), "awards", ["callsign"], unique=False)
    op.create_index(op.f("ix_awards_id"), "awards", ["id"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("clerk_user_id", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("callsign", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_users_clerk_user_id"), "users", ["clerk_user_id"], unique=True
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=False)
    op.create_index(op.f("ix_users_callsign"), "users", ["callsign"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)

    # Create dummy users for existing spotter callsigns
    # These will have null clerk_user_id temporarily until users sign up with Clerk
    connection = op.get_bind()
    distinct_spotters = connection.execute(
        sa.text("SELECT DISTINCT spotter FROM qso_logs WHERE spotter IS NOT NULL")
    ).fetchall()
    for i, (spotter,) in enumerate(distinct_spotters):
        # Create dummy clerk_user_id for existing spotters
        dummy_clerk_id = f"legacy_user_{i}_{spotter}"
        connection.execute(
            sa.text(
                "INSERT INTO users (clerk_user_id, callsign) VALUES (:clerk_user_id, :callsign) ON CONFLICT (callsign) DO NOTHING"
            ),
            {"clerk_user_id": dummy_clerk_id, "callsign": spotter},
        )

    # Now add the foreign key
    op.create_foreign_key(None, "qso_logs", "users", ["spotter"], ["callsign"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("qso_logs_spotter_fkey", "qso_logs", type_="foreignkey")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_callsign"), table_name="users")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index(op.f("ix_users_clerk_user_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_awards_id"), table_name="awards")
    op.drop_index(op.f("ix_awards_callsign"), table_name="awards")
    op.drop_table("awards")
    # ### end Alembic commands ###
